package proof

import (
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/stretchr/testify/require"
	"github.com/tendermint/tendermint/crypto/tmhash"
	"github.com/tendermint/tendermint/types"
)

/*
{
	"commit": {
        "height": "180356",
        "round": 0,
        "block_id": {
          	"hash": "8C36C3D12A378BD7E4E8F26BDECCA68B48390240DA456EE9C3292B6E36756AC4",
          	"parts": {
            	"total": 1,
            	"hash": "44551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F05841827"
          	}
		},
		"signatures": [
			{
            	"block_id_flag": 2,
            	"validator_address": "7C4E472143CFCF54E5304AD43F97D13C9A962AC0",
            	"timestamp": "2021-05-19T08:20:46.678980055Z",
            	"signature": "jBEnsbXWLTTtSZZIPQUpX6KnyJ/6RcJ+MDifnE0LdVEinVRzgWAKapchoUeDhGyzoXG9Kp+PvMYl0tEtMN5Wgg=="
			},
			{
				"block_id_flag": 2,
				"validator_address": "BB2B1EF40C69782CEB019C328A99CD22A1FDDB08",
				"timestamp": "2021-05-19T08:20:46.862402741Z",
				"signature": "vrw2DF98CDgWJCKEzvT3c7YAiyRSCHOiI8a5LcLrLHkVYKl9el5cNtB1IJHlR7DHjXcvh5tMcAl0c6cV15pLsQ=="
			},
			{
				"block_id_flag": 2,
				"validator_address": "617273C8759C21A2D64B293A053DEDEE02E6F17A",
				"timestamp": "2021-05-19T08:20:46.762036208Z",
				"signature": "aRZAXVL/Auwm3XjoMeChecibmcu9sVydqAK3WnYh1etpz0C+esGqF2sTuk1X6yuHNaWDIBTw3BaOpvWAxRuyIg=="
			},
			{
				"block_id_flag": 2,
				"validator_address": "C48D87B94082EF70920F9796912353B8ED2936A7",
				"timestamp": "2021-05-19T08:20:46.754255798Z",
				"signature": "60AvS4Y6Hfked3LZV0ZA7/xUR+zsbt9vHP4sM9fcjdQf7EVSPohd1uitdeotgdMGVyZ99kZAYkDyBqmHSevQpw=="
			},
			{
				"block_id_flag": 2,
				"validator_address": "133A3336ABA01278EAAEC4E7626FD704753AF765",
				"timestamp": "2021-05-19T08:20:46.831072311Z",
				"signature": "Rm4fpjyiLOhOc2HMYqeqaNR5RgPOLd4dez9wEd8ZfQs4QMlpmXS4JUtO4238CoraHftFbcGlA+omrlqijU/ulw=="
			},
			{
				"block_id_flag": 2,
				"validator_address": "1C5BDCDBF79A5FC9A0B1F44C58C9E3FF7CA3BE77",
				"timestamp": "2021-05-19T08:20:46.854889384Z",
				"signature": "lz4avRWRHumAoHE07QsrSjhdyEUsm5yg72h1O7w6i0ERYrJj/TOnaNc1JZ9OUmu4kl7i81jQ4ROY9oRoIN03lA=="
			},
			{
				"block_id_flag": 2,
				"validator_address": "24B51F90F4F339F7EBB743AF1F52DD5AE750923E",
				"timestamp": "2021-05-19T08:20:46.864253402Z",
				"signature": "ao48Nd7tmR0le8qUUTYL++eXjTiK+NL4ZKaRn+EIPH4U0UXda8GncKy9832sCN2AdquIj9onOb6bl2eyOjh9Hg=="
			}
        ]
	}
}
*/

func TestGetSignaturesAndPrefix(t *testing.T) {
	header := types.Header{
		ChainID: "band-laozi-testnet1",
	}
	commit := types.Commit{
		Height: 180356,
		Round:  0,
		BlockID: types.BlockID{
			Hash: hexToBytes("8C36C3D12A378BD7E4E8F26BDECCA68B48390240DA456EE9C3292B6E36756AC4"),
			PartSetHeader: types.PartSetHeader{
				Total: 1,
				Hash:  hexToBytes("44551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F05841827"),
			},
		},
		Signatures: []types.CommitSig{
			{
				BlockIDFlag:      2,
				ValidatorAddress: hexToBytes("7C4E472143CFCF54E5304AD43F97D13C9A962AC0"),
				Timestamp:        parseTime("2021-05-19T08:20:46.678980055Z"),
				Signature:        base64ToBytes("jBEnsbXWLTTtSZZIPQUpX6KnyJ/6RcJ+MDifnE0LdVEinVRzgWAKapchoUeDhGyzoXG9Kp+PvMYl0tEtMN5Wgg=="),
			},
			{
				BlockIDFlag:      2,
				ValidatorAddress: hexToBytes("BB2B1EF40C69782CEB019C328A99CD22A1FDDB08"),
				Timestamp:        parseTime("2021-05-19T08:20:46.862402741Z"),
				Signature:        base64ToBytes("vrw2DF98CDgWJCKEzvT3c7YAiyRSCHOiI8a5LcLrLHkVYKl9el5cNtB1IJHlR7DHjXcvh5tMcAl0c6cV15pLsQ=="),
			},
			{
				BlockIDFlag:      2,
				ValidatorAddress: hexToBytes("617273C8759C21A2D64B293A053DEDEE02E6F17A"),
				Timestamp:        parseTime("2021-05-19T08:20:46.762036208Z"),
				Signature:        base64ToBytes("aRZAXVL/Auwm3XjoMeChecibmcu9sVydqAK3WnYh1etpz0C+esGqF2sTuk1X6yuHNaWDIBTw3BaOpvWAxRuyIg=="),
			},
			{
				BlockIDFlag:      2,
				ValidatorAddress: hexToBytes("C48D87B94082EF70920F9796912353B8ED2936A7"),
				Timestamp:        parseTime("2021-05-19T08:20:46.754255798Z"),
				Signature:        base64ToBytes("60AvS4Y6Hfked3LZV0ZA7/xUR+zsbt9vHP4sM9fcjdQf7EVSPohd1uitdeotgdMGVyZ99kZAYkDyBqmHSevQpw=="),
			},
			{
				BlockIDFlag:      2,
				ValidatorAddress: hexToBytes("133A3336ABA01278EAAEC4E7626FD704753AF765"),
				Timestamp:        parseTime("2021-05-19T08:20:46.831072311Z"),
				Signature:        base64ToBytes("Rm4fpjyiLOhOc2HMYqeqaNR5RgPOLd4dez9wEd8ZfQs4QMlpmXS4JUtO4238CoraHftFbcGlA+omrlqijU/ulw=="),
			},
			{
				BlockIDFlag:      2,
				ValidatorAddress: hexToBytes("1C5BDCDBF79A5FC9A0B1F44C58C9E3FF7CA3BE77"),
				Timestamp:        parseTime("2021-05-19T08:20:46.854889384Z"),
				Signature:        base64ToBytes("lz4avRWRHumAoHE07QsrSjhdyEUsm5yg72h1O7w6i0ERYrJj/TOnaNc1JZ9OUmu4kl7i81jQ4ROY9oRoIN03lA=="),
			},
			{
				BlockIDFlag:      2,
				ValidatorAddress: hexToBytes("24B51F90F4F339F7EBB743AF1F52DD5AE750923E"),
				Timestamp:        parseTime("2021-05-19T08:20:46.864253402Z"),
				Signature:        base64ToBytes("ao48Nd7tmR0le8qUUTYL++eXjTiK+NL4ZKaRn+EIPH4U0UXda8GncKy9832sCN2AdquIj9onOb6bl2eyOjh9Hg=="),
			},
		},
	}
	sh := types.SignedHeader{
		Header: &header,
		Commit: &commit,
	}
	sig, err := GetSignaturesAndPrefix(&sh)
	require.NoError(t, err)

	expected := []TMSignature{
		{
			R:                hexToBytes("6916405D52FF02EC26DD78E831E0A179C89B99CBBDB15C9DA802B75A7621D5EB"),
			S:                hexToBytes("69CF40BE7AC1AA176B13BA4D57EB2B8735A5832014F0DC168EA6F580C51BB222"),
			V:                28,
			SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610F0FFAEEB02321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("6A8E3C35DEED991D257BCA9451360BFBE7978D388AF8D2F864A6919FE1083C7E"),
			S:                hexToBytes("14D145DD6BC1A770ACBDF37DAC08DD8076AB888FDA2739BE9B9767B23A387D1E"),
			V:                27,
			SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610DAEB8D9C03321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("EB402F4B863A1DF91E7772D9574640EFFC5447ECEC6EDF6F1CFE2C33D7DC8DD4"),
			S:                hexToBytes("1FEC45523E885DD6E8AD75EA2D81D30657267DF646406240F206A98749EBD0A7"),
			V:                27,
			SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610B68FD4E702321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("973E1ABD15911EE980A07134ED0B2B4A385DC8452C9B9CA0EF68753BBC3A8B41"),
			S:                hexToBytes("1162B263FD33A768D735259F4E526BB8925EE2F358D0E11398F6846820DD3794"),
			V:                28,
			SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610A8A7D29703321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("BEBC360C5F7C083816242284CEF4F773B6008B24520873A223C6B92DC2EB2C79"),
			S:                hexToBytes("1560A97D7A5E5C36D0752091E547B0C78D772F879B4C70097473A715D79A4BB1"),
			V:                28,
			SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610B5F19C9B03321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("466E1FA63CA22CE84E7361CC62A7AA68D4794603CE2DDE1D7B3F7011DF197D0B"),
			S:                hexToBytes("3840C9699974B8254B4EE36DFC0A8ADA1DFB456DC1A503EA26AE5AA28D4FEE97"),
			V:                27,
			SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610B7D0A48C03321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("8C1127B1B5D62D34ED4996483D05295FA2A7C89FFA45C27E30389F9C4D0B7551"),
			S:                hexToBytes("229D547381600A6A9721A14783846CB3A171BD2A9F8FBCC625D2D12D30DE5682"),
			V:                27,
			SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610D7D3E1C302321362616E642D6C616F7A692D746573746E657431"),
		},
	}
	require.Equal(t, expected, sig)
}

func TestVerifySignature(t *testing.T) {
	signatures := []TMSignature{
		{
			R:                hexToBytes("6916405D52FF02EC26DD78E831E0A179C89B99CBBDB15C9DA802B75A7621D5EB"),
			S:                hexToBytes("69CF40BE7AC1AA176B13BA4D57EB2B8735A5832014F0DC168EA6F580C51BB222"),
			V:                28,
			SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610F0FFAEEB02321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("6A8E3C35DEED991D257BCA9451360BFBE7978D388AF8D2F864A6919FE1083C7E"),
			S:                hexToBytes("14D145DD6BC1A770ACBDF37DAC08DD8076AB888FDA2739BE9B9767B23A387D1E"),
			V:                27,
			SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610DAEB8D9C03321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("EB402F4B863A1DF91E7772D9574640EFFC5447ECEC6EDF6F1CFE2C33D7DC8DD4"),
			S:                hexToBytes("1FEC45523E885DD6E8AD75EA2D81D30657267DF646406240F206A98749EBD0A7"),
			V:                27,
			SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610B68FD4E702321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("973E1ABD15911EE980A07134ED0B2B4A385DC8452C9B9CA0EF68753BBC3A8B41"),
			S:                hexToBytes("1162B263FD33A768D735259F4E526BB8925EE2F358D0E11398F6846820DD3794"),
			V:                28,
			SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610A8A7D29703321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("BEBC360C5F7C083816242284CEF4F773B6008B24520873A223C6B92DC2EB2C79"),
			S:                hexToBytes("1560A97D7A5E5C36D0752091E547B0C78D772F879B4C70097473A715D79A4BB1"),
			V:                28,
			SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610B5F19C9B03321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("466E1FA63CA22CE84E7361CC62A7AA68D4794603CE2DDE1D7B3F7011DF197D0B"),
			S:                hexToBytes("3840C9699974B8254B4EE36DFC0A8ADA1DFB456DC1A503EA26AE5AA28D4FEE97"),
			V:                27,
			SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610B7D0A48C03321362616E642D6C616F7A692D746573746E657431"),
		},
		{
			R:                hexToBytes("8C1127B1B5D62D34ED4996483D05295FA2A7C89FFA45C27E30389F9C4D0B7551"),
			S:                hexToBytes("229D547381600A6A9721A14783846CB3A171BD2A9F8FBCC625D2D12D30DE5682"),
			V:                27,
			SignedDataPrefix: hexToBytes("7808021184C002000000000022480A20"),
			SignedDataSuffix: hexToBytes("12240801122044551F853D916A7C630C0C210C921BAC7D05CE0C249DFC6088C0274F058418272A0C08DE9493850610D7D3E1C302321362616E642D6C616F7A692D746573746E657431"),
		},
	}

	evmAddresses := []common.Address{
		common.HexToAddress("0x3b759C4d728e50D5cC04c75f596367829d5b5061"),
		common.HexToAddress("0x49897b9D617AD700b84a935616E81f9f4b5305bc"),
		common.HexToAddress("0x7054bd1Fd7535A0DD552361e634196b1574594BB"),
		common.HexToAddress("0x7f2d13768c33155d4f77F9aB3eE23C3c6F820962"),
		common.HexToAddress("0xc4c14A16c0d8703Ad1786860546BDC47cdF94974"),
		common.HexToAddress("0xdDbd13b415ce90D4f323085A88edBE0a902Bc21D"),
		common.HexToAddress("0xe6778d28Ec8Bab3434CAfbE19FE13d889Dc79208"),
	}

	blockHash := hexToBytes("8C36C3D12A378BD7E4E8F26BDECCA68B48390240DA456EE9C3292B6E36756AC4")

	for i, sig := range signatures {
		msg := append(sig.SignedDataPrefix, blockHash...)
		msg = append(msg, sig.SignedDataSuffix...)

		sigBytes := append(sig.R, sig.S...)
		sigBytes = append(sigBytes, sig.V-27)
		pub, err := crypto.SigToPub(tmhash.Sum(msg), sigBytes)
		require.Nil(t, err)
		require.Equal(t, evmAddresses[i], crypto.PubkeyToAddress(*pub))
	}
}
